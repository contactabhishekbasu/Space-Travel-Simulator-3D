// Performance Monitor - Adaptive performance optimization system
class PerformanceMonitor {
    constructor() {
        this.frameRates = [];
        this.maxSamples = 60; // Track last 60 frames
        this.currentFPS = 60;
        this.averageFPS = 60;
        this.minFPS = 60;
        this.maxFPS = 60;
        
        // Performance thresholds
        this.thresholds = {
            critical: 15,  // Critical performance issues
            low: 25,       // Low performance
            good: 45,      // Good performance
            excellent: 55  // Excellent performance
        };
        
        // Timing
        this.lastFrameTime = performance.now();
        this.deltaTime = 0;
        this.frameCount = 0;
        
        // Memory tracking
        this.memoryUsage = {
            used: 0,
            total: 0,
            geometries: 0,
            textures: 0
        };
        
        // Performance state
        this.performanceLevel = 'excellent'; // critical, low, good, excellent
        this.adaptiveChanges = 0;
        this.lastOptimizationTime = 0;
        this.optimizationCooldown = 2000; // 2 seconds between optimizations
        
        // Performance history for analysis
        this.performanceHistory = [];
        this.maxHistoryLength = 300; // 5 minutes at 60fps
        
        // System capabilities
        this.systemCapabilities = this.detectSystemCapabilities();
        
        console.log('PerformanceMonitor: Initialized with capabilities:', this.systemCapabilities);
    }
    
    // Detect system capabilities
    detectSystemCapabilities() {
        const canvas = document.createElement('canvas');
        const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
        
        if (!gl) {
            return { tier: 'low', gpu: 'unknown', memory: 'low' };
        }
        
        const debugInfo = gl.getExtension('WEBGL_debug_renderer_info');
        const gpu = debugInfo ? gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL) : 'unknown';
        
        // Estimate GPU tier based on renderer string
        let tier = 'medium';
        if (gpu.includes('Intel HD') || gpu.includes('Intel UHD')) {\n            tier = 'low';\n        } else if (gpu.includes('GTX') || gpu.includes('RTX') || gpu.includes('RX ')) {\n            tier = 'high';\n        }\n        \n        // Estimate memory\n        const memory = navigator.deviceMemory || 4; // GB\n        const memoryTier = memory < 4 ? 'low' : memory < 8 ? 'medium' : 'high';\n        \n        return {\n            tier: tier,\n            gpu: gpu,\n            memory: memoryTier,\n            deviceMemory: memory,\n            maxTextureSize: gl.getParameter(gl.MAX_TEXTURE_SIZE),\n            maxAnisotropy: gl.getExtension('EXT_texture_filter_anisotropic') ? \n                          gl.getParameter(gl.getExtension('EXT_texture_filter_anisotropic').MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 1\n        };\n    }\n    \n    // Update performance metrics\n    update() {\n        const currentTime = performance.now();\n        this.deltaTime = currentTime - this.lastFrameTime;\n        this.lastFrameTime = currentTime;\n        \n        // Calculate FPS\n        if (this.deltaTime > 0) {\n            this.currentFPS = 1000 / this.deltaTime;\n            this.frameRates.push(this.currentFPS);\n            \n            // Maintain sample window\n            if (this.frameRates.length > this.maxSamples) {\n                this.frameRates.shift();\n            }\n            \n            // Calculate statistics\n            this.calculateStats();\n            \n            // Update performance level\n            this.updatePerformanceLevel();\n            \n            // Store performance history\n            this.recordPerformanceHistory();\n            \n            this.frameCount++;\n        }\n        \n        // Update memory usage\n        this.updateMemoryUsage();\n        \n        // Trigger adaptive optimizations if needed\n        this.checkForOptimizations();\n    }\n    \n    // Calculate performance statistics\n    calculateStats() {\n        if (this.frameRates.length === 0) return;\n        \n        this.averageFPS = this.frameRates.reduce((a, b) => a + b, 0) / this.frameRates.length;\n        this.minFPS = Math.min(...this.frameRates);\n        this.maxFPS = Math.max(...this.frameRates);\n    }\n    \n    // Update performance level based on current metrics\n    updatePerformanceLevel() {\n        const fps = this.averageFPS;\n        \n        if (fps < this.thresholds.critical) {\n            this.performanceLevel = 'critical';\n        } else if (fps < this.thresholds.low) {\n            this.performanceLevel = 'low';\n        } else if (fps < this.thresholds.good) {\n            this.performanceLevel = 'good';\n        } else {\n            this.performanceLevel = 'excellent';\n        }\n    }\n    \n    // Record performance history for analysis\n    recordPerformanceHistory() {\n        this.performanceHistory.push({\n            timestamp: performance.now(),\n            fps: this.currentFPS,\n            averageFPS: this.averageFPS,\n            performanceLevel: this.performanceLevel,\n            memoryUsage: this.memoryUsage.used\n        });\n        \n        // Maintain history length\n        if (this.performanceHistory.length > this.maxHistoryLength) {\n            this.performanceHistory.shift();\n        }\n    }\n    \n    // Update memory usage estimates\n    updateMemoryUsage() {\n        if (window.renderer && window.renderer.info) {\n            const info = window.renderer.info;\n            \n            this.memoryUsage = {\n                geometries: info.memory.geometries,\n                textures: info.memory.textures,\n                programs: info.programs?.length || 0,\n                triangles: info.render.triangles,\n                calls: info.render.calls\n            };\n        }\n    }\n    \n    // Check if optimizations are needed\n    checkForOptimizations() {\n        const now = performance.now();\n        \n        // Cooldown check\n        if (now - this.lastOptimizationTime < this.optimizationCooldown) {\n            return;\n        }\n        \n        // Only optimize if performance is consistently poor\n        if (this.shouldOptimize()) {\n            this.triggerOptimizations();\n            this.lastOptimizationTime = now;\n        }\n    }\n    \n    // Determine if optimization is needed\n    shouldOptimize() {\n        // Need at least 30 samples for reliable data\n        if (this.frameRates.length < 30) return false;\n        \n        // Check if performance has been consistently poor\n        const recentFrames = this.frameRates.slice(-30);\n        const recentAverage = recentFrames.reduce((a, b) => a + b, 0) / recentFrames.length;\n        \n        return recentAverage < this.thresholds.low;\n    }\n    \n    // Trigger adaptive optimizations\n    triggerOptimizations() {\n        console.log(`PerformanceMonitor: Triggering optimizations for ${this.performanceLevel} performance (${this.averageFPS.toFixed(1)} FPS)`);\n        \n        // Optimize different systems based on performance level\n        if (this.performanceLevel === 'critical') {\n            this.applyCriticalOptimizations();\n        } else if (this.performanceLevel === 'low') {\n            this.applyLowPerformanceOptimizations();\n        }\n        \n        this.adaptiveChanges++;\n    }\n    \n    // Apply critical performance optimizations\n    applyCriticalOptimizations() {\n        // Reduce texture quality\n        if (window.textureManager) {\n            window.textureManager.setQualityMode('low');\n        }\n        \n        // Optimize asteroid belt\n        if (window.asteroidBelt) {\n            window.asteroidBelt.adjustLODForPerformance(this.averageFPS);\n        }\n        \n        // Optimize moon systems\n        if (window.moonSystems) {\n            window.moonSystems.adjustLODForPerformance(this.averageFPS);\n        }\n        \n        // Optimize realistic sun\n        if (window.realisticSun && window.camera) {\n            const distance = window.camera.position.distanceTo(window.realisticSun.position);\n            window.realisticSun.updatePerformanceUniforms(distance, this.averageFPS);\n        }\n        \n        console.log('PerformanceMonitor: Applied critical optimizations');\n    }\n    \n    // Apply low performance optimizations\n    applyLowPerformanceOptimizations() {\n        // Similar to critical but less aggressive\n        if (window.asteroidBelt) {\n            window.asteroidBelt.adjustLODForPerformance(this.averageFPS);\n        }\n        \n        if (window.moonSystems) {\n            window.moonSystems.adjustLODForPerformance(this.averageFPS);\n        }\n        \n        console.log('PerformanceMonitor: Applied low performance optimizations');\n    }\n    \n    // Get recommended settings based on system capabilities\n    getRecommendedSettings() {\n        const settings = {\n            textureQuality: 'high',\n            asteroidCount: 1500,\n            enableAtmospheres: true,\n            enableMoons: true,\n            enableSpacecraft: true,\n            sunQuality: 'high',\n            shadowQuality: 'high'\n        };\n        \n        // Adjust based on system tier\n        if (this.systemCapabilities.tier === 'low' || this.systemCapabilities.memory === 'low') {\n            settings.textureQuality = 'low';\n            settings.asteroidCount = 1000;\n            settings.enableAtmospheres = false;\n            settings.sunQuality = 'medium';\n            settings.shadowQuality = 'low';\n        } else if (this.systemCapabilities.tier === 'medium') {\n            settings.asteroidCount = 1200;\n            settings.sunQuality = 'medium';\n            settings.shadowQuality = 'medium';\n        }\n        \n        return settings;\n    }\n    \n    // Get performance statistics\n    getPerformanceStats() {\n        return {\n            currentFPS: this.currentFPS.toFixed(1),\n            averageFPS: this.averageFPS.toFixed(1),\n            minFPS: this.minFPS.toFixed(1),\n            maxFPS: this.maxFPS.toFixed(1),\n            performanceLevel: this.performanceLevel,\n            frameCount: this.frameCount,\n            deltaTime: this.deltaTime.toFixed(2) + 'ms',\n            adaptiveChanges: this.adaptiveChanges,\n            memoryUsage: this.memoryUsage,\n            systemTier: this.systemCapabilities.tier,\n            gpu: this.systemCapabilities.gpu.substring(0, 50) // Truncate long GPU names\n        };\n    }\n    \n    // Get performance trend\n    getPerformanceTrend() {\n        if (this.performanceHistory.length < 60) {\n            return 'insufficient_data';\n        }\n        \n        const recent = this.performanceHistory.slice(-30);\n        const older = this.performanceHistory.slice(-60, -30);\n        \n        const recentAvg = recent.reduce((sum, p) => sum + p.fps, 0) / recent.length;\n        const olderAvg = older.reduce((sum, p) => sum + p.fps, 0) / older.length;\n        \n        const change = recentAvg - olderAvg;\n        \n        if (change > 5) return 'improving';\n        if (change < -5) return 'degrading';\n        return 'stable';\n    }\n    \n    // Export performance data for analysis\n    exportPerformanceData() {\n        const data = {\n            timestamp: new Date().toISOString(),\n            stats: this.getPerformanceStats(),\n            history: this.performanceHistory,\n            systemCapabilities: this.systemCapabilities,\n            thresholds: this.thresholds\n        };\n        \n        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `space-sim-performance-${new Date().toISOString().slice(0, 10)}.json`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n        \n        console.log('PerformanceMonitor: Performance data exported');\n    }\n    \n    // Reset performance tracking\n    reset() {\n        this.frameRates = [];\n        this.performanceHistory = [];\n        this.frameCount = 0;\n        this.adaptiveChanges = 0;\n        this.currentFPS = 60;\n        this.averageFPS = 60;\n        this.minFPS = 60;\n        this.maxFPS = 60;\n        \n        console.log('PerformanceMonitor: Reset performance tracking');\n    }\n    \n    // Cleanup\n    destroy() {\n        this.frameRates = [];\n        this.performanceHistory = [];\n        console.log('PerformanceMonitor: Destroyed and cleaned up');\n    }\n}